# This is an example of a new way to build a world in a programmatical way.
# Chapter 11, transparency and refraction.

println('Start world configuration')

# first some constants
pi = 3.141592653589

# Create a Camera object and set its attributes with a tuple.
camera = Camera()
camera.from = (0, 1.5, -12)
camera.to = (0, 1, 0)
camera.up = [0, 1, 0]
camera.field_of_view = pi / 3
camera.horizontal = 5000
# You can use expressions to calculate stuff
camera.vertical = camera.horizontal / 2

# Now setup the world. First some lights. The light will be created using a constructor.
# light1 one is a variable of type Light. A variable has to be assigned upon creation and
# will infer its type automatically.
light1 = Light( Point(-10, 10, -10), Color(0.35, 0.35, 0.35) )
light2 = Light()
light2.position = (10, 10, -10)
light2.intensity = Color(0.25, 0.25, 0.25)

# Now set light to the world! Create a World object to add lights to the world.
world = World()
world.add(light1)
world.add(light2)

world.refractions = true
world.reflections = true
world.shadows = true

# At last add some objects to your world to finalize the setup.
material = Material()
material.specular = 0
material.pattern = CheckerPattern(Color(1, 1, 1), Color(0, 0, 0))
material.reflective = 0.5

# Create the floor
floor = Plane(material)
floor.rotate_y(deg_to_rad(45)).translate(0, 0, 0.75)

# Add the floor to the world
world.add(floor)

material.reflective = 0

# Now we will create some walls for our scene environment
left_wall = Plane(material)
left_wall.rotate_x(pi / 2).rotate_y(-pi / 4).translate(0, 0, 5)

right_wall = Plane(material)
right_wall.rotate_x(pi / 2).rotate_y(pi / 4).translate(0, 0, 5)

world.add(left_wall).add(right_wall)

# Base material for the spheres
base_material = Material()
base_material.diffuse = 0.7
base_material.specular = 0.3

# And now place some objects into the scene frame
base_material.color = Color(0.8, 0, 0)
middle = Sphere(base_material).translate(-0.5, 1, 0.5)

base_material.color = Color(0.13, 0.8, 0)
right = Sphere(base_material).scale(0.33, 0.33, 0.33).translate(0.8, 0.33, -0.5)

base_material.color = Color(0.3, 0.42, 1.0)
left = Sphere(base_material).scale(0.5, 0.5, 0.5).translate(-1.5, 0.5, -0.75)

world.add(left).add(right).add(middle)

base_material.color = Color(1, 1, 1)
base_material.transparency = 1.0
base_material.refractive_index = 1.52
glass = Sphere(base_material).scale(1.2, 1.2, 1.2).translate(0.25, 1.2, -4)

world.add(glass)

# Now its time to actually render the world
println('Render world')
measure = Measurement()
canvas = camera.render(world)
println('World rendered in {} milliseconds', measure.elapsed_time())

# And then save the canvas to a file
canvas.write('scene_11')
println('World stored in {} milliseconds', measure.elapsed_time())

