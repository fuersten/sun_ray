# This is an example of a new way to build a world in a programmatical way.
# This creates the scene from chapter 9.

println('Start world configuration')

# first some constants
pi = 3.141592653589

# Create a Camera object and set its attributes with a tuple.
camera = Camera()
camera.from = (-1, 2, -10)
#camera.from = (-7, 1, 0)
camera.to = (0, 1.5, 0)
camera.up = [0, 1, 0]
camera.field_of_view = pi / 3
camera.horizontal = 3000
# You can use expressions to calculate stuff
camera.vertical = camera.horizontal / 2

# Now setup the world. First some lights. The light will be created using a constructor.
# light1 one is a variable of type Light. A variable has to be assigned upon creation and
# will infer its type automatically.
light = Light( Point(50, 100, -50), Color(1, 1, 1) )

# Now set light to the world! Create a World object to add lights to the world.
world = World()
world.add(light)
world.shadows = true

# At last add some objects to your world to finalize the setup.
material = Material()
material.color = Color(1, 1, 1)
material.specular = 0
material.ambient = 1
material.diffuse = 0

# Create a sphere, configure it and then we will transform it.
backdrop = Plane(material).rotate_x(deg_to_rad(90)).translate(0, 0, 500)

# Add the floor to the world
world.add(backdrop)

# Base material for the spheres
base_material = Material()
base_material.ambient = 0.5
base_material.diffuse = 0.9
base_material.specular = 0

# And now place some objects into the scene frame
base_material.color = Color(0.7, 0.7, 0.7)
middle = Sphere(base_material).scale(0.01, 1.3, 1.3).rotate_y(deg_to_rad(90)).translate(0, 1.5, -0.15)

world.add(middle)

material = Material()
material.color = Color(1, 1, 1)
material.ambient = 0.1
material.diffuse = 0.1
material.specular = 1
material.shininess = 50
material.reflective = 0.1
material.transparency = 1
material.refractive_index = 1.52

glass = Sphere(material).scale(0.4, 1.5, 1.5).rotate_y(deg_to_rad(90)).translate(0, 1.5, 0)
world.add(glass)

# Create the ticks
material.color = Color(0, 0, 0)
material.ambient = 0.7
material.diffuse = 0.05
material.specular = 0
material.shininess = 200
material.reflective = 0
material.transparency = 0
material.refractive_index = 0

deg = 0
n = 1
while(n <= 12)
  sphere = Sphere(material).scale(0.05, 0.05, 0.05).translate(0, 1.2, -0.15).rotate_z(deg_to_rad(deg)).translate(0, 1.5, 0)
  world.add(sphere)
  n = n + 1
  deg = deg + 30
end

# Now its time to actually render the world
println('Render world')
measure = Measurement()
canvas = camera.render(world)
println('World rendered in {} milliseconds', measure.elapsed_time())

# And then save the canvas to a file
canvas.write('sample_7.ppm')
println('World stored in {} milliseconds', measure.elapsed_time())

